// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/pipelines": {
            "post": {
                "description": "Applies Pipeline",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pipeline"
                ],
                "summary": "Apply Pipeline",
                "parameters": [
                    {
                        "description": "Pipeline Data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.Pipeline"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.ResponseDTO"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.ResponseDTO"
                        }
                    }
                }
            }
        },
        "/api/v1/pipelines/{processId}": {
            "get": {
                "description": "Gets logs by pipeline processId [available if local storage is enabled]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pipeline"
                ],
                "summary": "Get Logs [available if local storage is enabled]",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pipeline ProcessId",
                        "name": "processId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Record count",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.ResponseDTO"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v1/pipelines/{processId}/steps/{step}": {
            "get": {
                "description": "Check if step is claimable",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pipeline"
                ],
                "summary": "Check if step is claimable",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pipeline ProcessId",
                        "name": "processId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Pipeline step",
                        "name": "step",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Options [IfStepIsClaimable]",
                        "name": "question",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.ResponseDTO"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "common.MetaData": {
            "type": "object",
            "properties": {
                "links": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "page": {
                    "type": "integer"
                },
                "page_count": {
                    "type": "integer"
                },
                "per_page": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "common.ResponseDTO": {
            "type": "object",
            "properties": {
                "_metadata": {
                    "$ref": "#/definitions/common.MetaData"
                },
                "data": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "unstructured.Unstructured": {
            "type": "object",
            "properties": {
                "object": {
                    "description": "Object is a JSON compatible map with string, float, int, bool, []interface{}, or\nmap[string]interface{}\nchildren.",
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "v1.CompanyMetadata": {
            "type": "object",
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "number_of_concurrent_process": {
                    "type": "integer"
                },
                "total_process_per_day": {
                    "type": "integer"
                }
            }
        },
        "v1.Pipeline": {
            "type": "object",
            "properties": {
                "_metadata": {
                    "$ref": "#/definitions/v1.PipelineMetadata"
                },
                "api_version": {
                    "type": "string"
                },
                "label": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "option": {
                    "$ref": "#/definitions/v1.PipelineApplyOption"
                },
                "process_id": {
                    "type": "string"
                },
                "steps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Step"
                    }
                }
            }
        },
        "v1.PipelineApplyOption": {
            "type": "object",
            "properties": {
                "purging": {
                    "type": "string"
                }
            }
        },
        "v1.PipelineMetadata": {
            "type": "object",
            "properties": {
                "company_id": {
                    "type": "string"
                },
                "company_metadata": {
                    "$ref": "#/definitions/v1.CompanyMetadata"
                }
            }
        },
        "v1.Step": {
            "type": "object",
            "properties": {
                "arg_data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "descriptors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/unstructured.Unstructured"
                    }
                },
                "env_data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "next": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "params": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "trigger": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Klovercloud-ci-core API",
	Description: "Klovercloud-ci-core API",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
